@page "/admin/book"
@page "/admin/book/{id:int}"
@inject IBookService BookService
@inject IBookTypeService BookTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (book.Editing)
    {
        <h3>Edit "@book.Title"</h3>
    }
    else if (book.IsNew)
    {
        <h3>Create a new Book</h3>
    }

    <EditForm Model="book" OnValidSubmit="AddOrUpdateBook">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="book.Title" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="book.ImageURL" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <img src="@book.ImageURL" />
        </div>
        <div class="mb-0">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="book.Description" class="form-control"></InputTextArea>
        </div>
        <hr />
        <div class="header">
            <div class="col">Book Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in book.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.BookTypeId" class="form-control">
                        @foreach (var bookType in BookTypeService.BookTypes)
                        {
                            <option value="@bookType.Id.ToString()">@bookType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" disabled="@variant.Deleted"></InputCheckbox>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.BookTypeId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add Variant
        </button>
        <hr />
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="book.CategoryId" class="form-control">
                @foreach (var category in CategoryService.AdminCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr />
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="book.Featured" class="form-check-input"></InputCheckbox>
            <label for="featured" class="form-check-label">Featured</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="book.Visible" class="form-check-input"></InputCheckbox>
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr />
        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>

    @if (!book.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteBook">
            Delete Book
        </button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    Book book = new Book();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await BookTypeService.GetBookTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            book = new Book { IsNew = true };
            btnText = "Create Book";
        }
        else
        {
            Book dbBook = (await BookService.GetBook(Id)).Data;
            if (dbBook == null)
            {
                msg = $"Book with Id '{Id}' does not exist!";
                return;
            }
            book = dbBook;
            book.Editing = true;
            btnText = "Update Book";
        }
        loading = false;
    }

    void RemoveVariant(int bookTypeId)
    {
        var variant = book.Variants.Find(v => v.BookTypeId == bookTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            book.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        book.Variants.Add(new BookVariant { IsNew = true, BookId = book.Id });
    }

    async void AddOrUpdateBook()
    {
        if (book.IsNew)
        {
            var result = await BookService.CreateBook(book);
            NavigationManager.NavigateTo($"admin/book/{result.Id}");
        }
        else
        {
            book.IsNew = false;
            book = await BookService.UpdateBook(book);
            NavigationManager.NavigateTo($"admin/book/{book.Id}", true);
        }
    }

    async void DeleteBook()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Do you really want to delete '{book.Title}'?");
        if (confirmed)
        {
            await BookService.DeleteBook(book);
            NavigationManager.NavigateTo("admin/books");
        }
    }
}
