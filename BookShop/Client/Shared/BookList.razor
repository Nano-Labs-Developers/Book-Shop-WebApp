@inject IBookService BookService
@implements IDisposable

@if (BookService.Books == null || BookService.Books.Count == 0)
{
    <span>@BookService.Message</span>
}
else
{
    <div class="container-fluid">
        <div class="d-flex flex-row flex-wrap">
            @{
                foreach (var book in BookService.Books)
                {
                    <a class="user-select-none text-decoration-none" href="/book/@book.Id">
                        <div class="card" style="width: 18rem; height: 28rem;">
                            <img class="card-img-top" style="height: 18rem; width: 286px;" src="@book.ImageURL" alt="@book.Title">
                            <div class="card-body">
                                <p class="card-text">
                                    <span class="text-dark fw-bold">@book.Title</span>
                                    <p class="text-success fs-5">@GetPriceText(book)</p>
                                <small class="protip"><span class="fw-bold align-bottom">PRO TIP</span>: Click for get more details.</small></p>
                            </div>
                        </div>
                    </a>
                }
            }
        </div>
    </div>
    for (var i = 1; i <= BookService.PageCount; i++)
    {
        <a class="btn
                 @(i == BookService.CurrentPage ? "btn-info" : "btn-outline-info")
                 page-selection"
                 href="/search/@BookService.LastSearchText/@i">@i</a>
    }
}

@code {
    protected override void OnInitialized()
    {
        BookService.OnBookChanged += StateHasChanged;
    }

    public void Dispose()
    {
        BookService.OnBookChanged -= StateHasChanged;
    }

    private string GetPriceText(Book book)
    {
        var variants = book.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}
